//Program for diagonal matrix without class
#include <iostream>

using namespace std;

void set(int A[], int i, int j, int x){
    if(i==j){
        A[i-1]=x;
    }
}

int get(int A[], int i, int j){
    if(i==j){
        return A[i-1];
    }else{
        return 0;
    }
}

void Display(int A[]){
    int i, j;
    for(i=0; i<5; i++){
        for(j=0; j<5; j++){
            if(i==j){
            cout<<A[j]<<" ";
            }else{
                cout<<"0 ";
            }
        }
        cout<<endl;
    }
}

int main()
{
    int n=5;
    int A[n];
    set(A,1,1,5);
    set(A,2,2,7);
    set(A,3,3,9);
    set(A,4,4,6);
    set(A,5,5,8);
    
    Display(A);
    cout<<get(A,2,2);
}



//Program for diagonal matrix using class
#include <iostream>

using namespace std;

class Diagonal{
    private:
        int n;
        int *A;
    public:
        Diagonal(){
            n=2;
            A=new int[2];
        }
        Diagonal(int n){
            this->n=n;
            A=new int[n];
        }
        void set(int i, int j, int x){
            if(i==j){
                A[i-1]=x;
        }
}

        int get(int i, int j){
             if(i==j){
                return A[i-1];
            }else{
                 return 0;
        }
}
        void Display(){
         int i, j;
             for(i=0; i<n; i++){
                for(j=0; j<n; j++){
                     if(i==j){
                        cout<<A[j]<<" ";
                     }else{
                          cout<<"0 ";
            }
        }
        cout<<endl;
    }
}

~Diagonal(){
    delete[]A;
}
};

int main()
{
    Diagonal d(5);
    d.set(1,1,5);
    d.set(2,2,4);
    d.set(3,3,5);
    d.set(4,4,6);
    d.set(5,5,9);
    
    d.Display();
    
}
